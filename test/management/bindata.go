// Package management Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/start.sh
package management

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _startSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5b\x4f\x1b\x3d\x10\x7d\xf7\xaf\x98\x8f\xaf\x2a\x4f\x5e\x2b\x2d\x42\x15\x22\x48\x90\x06\x51\xa1\x0a\x24\x7a\x79\x40\x3c\x4c\xec\xc1\x71\xf1\x65\x65\x8f\x69\x36\x24\xff\xbd\x5a\x96\x72\x49\xd5\x8a\x97\xf5\x6a\xce\xcc\xd9\x73\xce\x8e\xff\xff\x4f\xcd\x5c\x54\x33\x2c\x73\x90\xb4\x10\x82\x16\xa4\xe1\xdd\xc1\xdb\x51\xff\xda\xa6\xcc\x70\x72\xf6\x79\x3a\x56\x39\x25\x16\xda\x08\xd1\xd5\x00\x2e\x16\x46\xef\xc1\x3a\x06\xd9\x09\xa1\x6b\xf6\x20\x0b\xcc\x99\xdb\xb2\xa7\x54\xe1\x94\xd1\x52\x63\x53\xb2\x9e\xb0\x75\xa5\xd1\x29\x28\x9b\x3c\x46\xab\x6c\x1a\x35\xa3\x51\xb3\xdb\x78\x17\xeb\x42\x62\x30\xbb\x3b\x0d\x63\x6e\xec\x12\x56\xc0\x98\x41\x4e\x40\xd5\x92\x95\x4f\x1a\x3d\xc8\xc5\x52\x9c\x1f\x7e\x39\x19\xbf\xe9\x9f\x7b\x4f\x88\xb2\xa9\x57\x2f\x84\x4d\x60\x89\x41\xd6\x5e\xd1\xbc\xce\xee\xbf\x16\x7e\x54\x43\xee\xc6\x15\x95\x5a\x8a\x65\xee\xae\x59\xe2\xb2\x66\x52\x3a\x18\xd5\xe6\xb4\xe8\x84\x08\x37\xc6\x65\x30\xc8\x28\x34\x32\x1c\xdc\x97\xa5\xa6\xcc\x4d\x4b\x01\xf6\xf7\xb7\xa7\x67\xc7\xdb\xe2\xee\x0e\x9a\x49\x8a\xd7\xce\x36\x13\xef\x28\xf2\x84\x32\xc3\x0a\xfa\xe3\xb0\x1c\x75\x4c\x05\x56\x70\xc1\xd9\x45\x0b\xeb\xb5\x98\x9e\x1d\x8b\xe7\x84\x37\xd4\xfd\x9b\xef\x94\x3a\x58\xc1\x79\x76\xb7\xc8\x74\x4a\xdd\x6b\x48\x35\xfe\x95\x13\x5f\xa5\x4d\x11\x6b\x55\xba\xc2\x14\xcc\xc3\xa9\x30\x27\x79\x4f\xdf\x14\xca\xb7\x4e\xd3\x23\xff\xe5\xd7\xe8\xf8\x4a\x7c\xa4\xa2\xb3\x6b\xd9\xa5\x38\x7e\x6c\x16\xe2\xf2\x62\x68\xbf\x12\xd3\x05\xe9\x0b\xc6\xcc\xc3\xd2\x3c\xfc\xa4\x21\x70\x90\xbd\xe2\xa1\xbe\x11\x75\x9f\xd1\x0b\xe4\x77\x66\x52\xe3\xcb\x89\xc1\xb6\x2c\x75\x16\x89\x61\xeb\x99\xef\x6f\x91\x78\xe2\x4c\x86\xf5\x7a\x4b\x88\xcb\x4f\xc3\x9a\x5e\x89\xef\x18\x99\xcc\x51\x37\x0e\xd5\xb3\x93\xb5\x50\xee\x17\xce\x12\x0f\x69\x94\x6a\x12\x0c\x01\x68\xf6\x60\x90\x42\x8a\x32\x93\x4f\x68\xfe\x40\x29\xe2\xcc\x13\x3c\x79\xdf\xc0\x4b\xef\xfd\x19\x2c\xae\x5d\xa6\x9f\xe8\xbd\xd4\xc1\x80\x94\xcb\x14\x69\xdc\xd6\x99\x77\x1a\xa4\x44\x63\x64\x7f\xcd\xc6\x1f\x76\x76\xde\x2b\xd6\x2d\x48\xd9\x52\x0e\x18\x29\xf2\xe6\xe8\xa0\xe8\x57\x00\x00\x00\xff\xff\xa3\x4e\x09\x17\xb4\x03\x00\x00")

func startShBytes() ([]byte, error) {
	return bindataRead(
		_startSh,
		"start.sh",
	)
}

func startSh() (*asset, error) {
	bytes, err := startShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "start.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"start.sh": startSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"start.sh": {startSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
