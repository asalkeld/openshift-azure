// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/openshift/openshift-azure/pkg/api"
)

// MockUpgrader is a mock of Upgrader interface
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// CreateClients mocks base method
func (m *MockUpgrader) CreateClients(ctx context.Context, cs *api.OpenShiftManagedCluster) error {
	ret := m.ctrl.Call(m, "CreateClients", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClients indicates an expected call of CreateClients
func (mr *MockUpgraderMockRecorder) CreateClients(ctx, cs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClients", reflect.TypeOf((*MockUpgrader)(nil).CreateClients), ctx, cs)
}

// Deploy mocks base method
func (m *MockUpgrader) Deploy(ctx context.Context, cs *api.OpenShiftManagedCluster, azuretemplate map[string]interface{}, deployFn api.DeployFn) *api.PluginError {
	ret := m.ctrl.Call(m, "Deploy", ctx, cs, azuretemplate, deployFn)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockUpgraderMockRecorder) Deploy(ctx, cs, azuretemplate, deployFn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockUpgrader)(nil).Deploy), ctx, cs, azuretemplate, deployFn)
}

// Update mocks base method
func (m *MockUpgrader) Update(ctx context.Context, cs *api.OpenShiftManagedCluster, azuretemplate map[string]interface{}, deployFn api.DeployFn) *api.PluginError {
	ret := m.ctrl.Call(m, "Update", ctx, cs, azuretemplate, deployFn)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpgraderMockRecorder) Update(ctx, cs, azuretemplate, deployFn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpgrader)(nil).Update), ctx, cs, azuretemplate, deployFn)
}

// HealthCheck mocks base method
func (m *MockUpgrader) HealthCheck(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	ret := m.ctrl.Call(m, "HealthCheck", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockUpgraderMockRecorder) HealthCheck(ctx, cs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUpgrader)(nil).HealthCheck), ctx, cs)
}

// WaitForInfraServices mocks base method
func (m *MockUpgrader) WaitForInfraServices(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	ret := m.ctrl.Call(m, "WaitForInfraServices", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// WaitForInfraServices indicates an expected call of WaitForInfraServices
func (mr *MockUpgraderMockRecorder) WaitForInfraServices(ctx, cs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInfraServices", reflect.TypeOf((*MockUpgrader)(nil).WaitForInfraServices), ctx, cs)
}

// Evacuate mocks base method
func (m *MockUpgrader) Evacuate(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	ret := m.ctrl.Call(m, "Evacuate", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// Evacuate indicates an expected call of Evacuate
func (mr *MockUpgraderMockRecorder) Evacuate(ctx, cs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evacuate", reflect.TypeOf((*MockUpgrader)(nil).Evacuate), ctx, cs)
}
