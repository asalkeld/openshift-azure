// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/openshift-azure/pkg/cluster (interfaces: Upgrader)

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	context "context"
	reflect "reflect"

	storage "github.com/Azure/azure-sdk-for-go/storage"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"

	api "github.com/openshift/openshift-azure/pkg/api"
)

// MockUpgrader is a mock of Upgrader interface
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// BackupCluster mocks base method
func (m *MockUpgrader) BackupCluster(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BackupCluster indicates an expected call of BackupCluster
func (mr *MockUpgraderMockRecorder) BackupCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCluster", reflect.TypeOf((*MockUpgrader)(nil).BackupCluster), arg0, arg1)
}

// CreateOrUpdateConfigStorageAccount mocks base method
func (m *MockUpgrader) CreateOrUpdateConfigStorageAccount(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConfigStorageAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateConfigStorageAccount indicates an expected call of CreateOrUpdateConfigStorageAccount
func (mr *MockUpgraderMockRecorder) CreateOrUpdateConfigStorageAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConfigStorageAccount", reflect.TypeOf((*MockUpgrader)(nil).CreateOrUpdateConfigStorageAccount), arg0)
}

// CreateOrUpdateSyncPod mocks base method
func (m *MockUpgrader) CreateOrUpdateSyncPod(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateSyncPod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateSyncPod indicates an expected call of CreateOrUpdateSyncPod
func (mr *MockUpgraderMockRecorder) CreateOrUpdateSyncPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateSyncPod", reflect.TypeOf((*MockUpgrader)(nil).CreateOrUpdateSyncPod), arg0)
}

// DeleteMaster mocks base method
func (m *MockUpgrader) DeleteMaster(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaster indicates an expected call of DeleteMaster
func (mr *MockUpgraderMockRecorder) DeleteMaster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaster", reflect.TypeOf((*MockUpgrader)(nil).DeleteMaster), arg0)
}

// DrainAndDeleteWorker mocks base method
func (m *MockUpgrader) DrainAndDeleteWorker(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainAndDeleteWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrainAndDeleteWorker indicates an expected call of DrainAndDeleteWorker
func (mr *MockUpgraderMockRecorder) DrainAndDeleteWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainAndDeleteWorker", reflect.TypeOf((*MockUpgrader)(nil).DrainAndDeleteWorker), arg0, arg1)
}

// EnablePrivateEndpointRoundTripper mocks base method
func (m *MockUpgrader) EnablePrivateEndpointRoundTripper(arg0 *api.OpenShiftManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePrivateEndpointRoundTripper", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePrivateEndpointRoundTripper indicates an expected call of EnablePrivateEndpointRoundTripper
func (mr *MockUpgraderMockRecorder) EnablePrivateEndpointRoundTripper(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePrivateEndpointRoundTripper", reflect.TypeOf((*MockUpgrader)(nil).EnablePrivateEndpointRoundTripper), arg0)
}

// EnrichCertificatesFromVault mocks base method
func (m *MockUpgrader) EnrichCertificatesFromVault(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichCertificatesFromVault", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrichCertificatesFromVault indicates an expected call of EnrichCertificatesFromVault
func (mr *MockUpgraderMockRecorder) EnrichCertificatesFromVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichCertificatesFromVault", reflect.TypeOf((*MockUpgrader)(nil).EnrichCertificatesFromVault), arg0)
}

// EnrichStorageAccountKeys mocks base method
func (m *MockUpgrader) EnrichStorageAccountKeys(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichStorageAccountKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrichStorageAccountKeys indicates an expected call of EnrichStorageAccountKeys
func (mr *MockUpgraderMockRecorder) EnrichStorageAccountKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichStorageAccountKeys", reflect.TypeOf((*MockUpgrader)(nil).EnrichStorageAccountKeys), arg0)
}

// EnsureSyncPod mocks base method
func (m *MockUpgrader) EnsureSyncPod(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureSyncPod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureSyncPod indicates an expected call of EnsureSyncPod
func (mr *MockUpgraderMockRecorder) EnsureSyncPod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSyncPod", reflect.TypeOf((*MockUpgrader)(nil).EnsureSyncPod), arg0, arg1, arg2)
}

// EtcdListBackups mocks base method
func (m *MockUpgrader) EtcdListBackups(arg0 context.Context) ([]storage.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EtcdListBackups", arg0)
	ret0, _ := ret[0].([]storage.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EtcdListBackups indicates an expected call of EtcdListBackups
func (mr *MockUpgraderMockRecorder) EtcdListBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EtcdListBackups", reflect.TypeOf((*MockUpgrader)(nil).EtcdListBackups), arg0)
}

// EtcdRestoreDeleteMasterScaleSet mocks base method
func (m *MockUpgrader) EtcdRestoreDeleteMasterScaleSet(arg0 context.Context) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EtcdRestoreDeleteMasterScaleSet", arg0)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// EtcdRestoreDeleteMasterScaleSet indicates an expected call of EtcdRestoreDeleteMasterScaleSet
func (mr *MockUpgraderMockRecorder) EtcdRestoreDeleteMasterScaleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EtcdRestoreDeleteMasterScaleSet", reflect.TypeOf((*MockUpgrader)(nil).EtcdRestoreDeleteMasterScaleSet), arg0)
}

// EtcdRestoreDeleteMasterScaleSetHashes mocks base method
func (m *MockUpgrader) EtcdRestoreDeleteMasterScaleSetHashes(arg0 context.Context) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EtcdRestoreDeleteMasterScaleSetHashes", arg0)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// EtcdRestoreDeleteMasterScaleSetHashes indicates an expected call of EtcdRestoreDeleteMasterScaleSetHashes
func (mr *MockUpgraderMockRecorder) EtcdRestoreDeleteMasterScaleSetHashes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EtcdRestoreDeleteMasterScaleSetHashes", reflect.TypeOf((*MockUpgrader)(nil).EtcdRestoreDeleteMasterScaleSetHashes), arg0)
}

// GenerateARM mocks base method
func (m *MockUpgrader) GenerateARM(arg0 context.Context, arg1 string, arg2 bool, arg3 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateARM", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateARM indicates an expected call of GenerateARM
func (mr *MockUpgraderMockRecorder) GenerateARM(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateARM", reflect.TypeOf((*MockUpgrader)(nil).GenerateARM), arg0, arg1, arg2, arg3)
}

// GetControlPlanePods mocks base method
func (m *MockUpgrader) GetControlPlanePods(arg0 context.Context) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlPlanePods", arg0)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlPlanePods indicates an expected call of GetControlPlanePods
func (mr *MockUpgraderMockRecorder) GetControlPlanePods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlPlanePods", reflect.TypeOf((*MockUpgrader)(nil).GetControlPlanePods), arg0)
}

// HealthCheck mocks base method
func (m *MockUpgrader) HealthCheck(arg0 context.Context) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockUpgraderMockRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUpgrader)(nil).HealthCheck), arg0)
}

// InitializeUpdateBlob mocks base method
func (m *MockUpgrader) InitializeUpdateBlob(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeUpdateBlob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeUpdateBlob indicates an expected call of InitializeUpdateBlob
func (mr *MockUpgraderMockRecorder) InitializeUpdateBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeUpdateBlob", reflect.TypeOf((*MockUpgrader)(nil).InitializeUpdateBlob), arg0)
}

// ListVMHostnames mocks base method
func (m *MockUpgrader) ListVMHostnames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMHostnames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMHostnames indicates an expected call of ListVMHostnames
func (mr *MockUpgraderMockRecorder) ListVMHostnames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMHostnames", reflect.TypeOf((*MockUpgrader)(nil).ListVMHostnames), arg0)
}

// Reimage mocks base method
func (m *MockUpgrader) Reimage(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reimage indicates an expected call of Reimage
func (mr *MockUpgraderMockRecorder) Reimage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockUpgrader)(nil).Reimage), arg0, arg1, arg2)
}

// ResetUpdateBlob mocks base method
func (m *MockUpgrader) ResetUpdateBlob() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUpdateBlob")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUpdateBlob indicates an expected call of ResetUpdateBlob
func (mr *MockUpgraderMockRecorder) ResetUpdateBlob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUpdateBlob", reflect.TypeOf((*MockUpgrader)(nil).ResetUpdateBlob))
}

// RunCommand mocks base method
func (m *MockUpgrader) RunCommand(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockUpgraderMockRecorder) RunCommand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockUpgrader)(nil).RunCommand), arg0, arg1, arg2, arg3)
}

// SortedAgentPoolProfilesForRole mocks base method
func (m *MockUpgrader) SortedAgentPoolProfilesForRole(arg0 api.AgentPoolProfileRole) []api.AgentPoolProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedAgentPoolProfilesForRole", arg0)
	ret0, _ := ret[0].([]api.AgentPoolProfile)
	return ret0
}

// SortedAgentPoolProfilesForRole indicates an expected call of SortedAgentPoolProfilesForRole
func (mr *MockUpgraderMockRecorder) SortedAgentPoolProfilesForRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedAgentPoolProfilesForRole", reflect.TypeOf((*MockUpgrader)(nil).SortedAgentPoolProfilesForRole), arg0)
}

// UpdateMasterAgentPool mocks base method
func (m *MockUpgrader) UpdateMasterAgentPool(arg0 context.Context, arg1 *api.AgentPoolProfile) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMasterAgentPool", arg0, arg1)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// UpdateMasterAgentPool indicates an expected call of UpdateMasterAgentPool
func (mr *MockUpgraderMockRecorder) UpdateMasterAgentPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMasterAgentPool", reflect.TypeOf((*MockUpgrader)(nil).UpdateMasterAgentPool), arg0, arg1)
}

// UpdateMasterAgentPoolTogether mocks base method
func (m *MockUpgrader) UpdateMasterAgentPoolTogether(arg0 context.Context, arg1 *api.AgentPoolProfile) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMasterAgentPoolTogether", arg0, arg1)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// UpdateMasterAgentPoolTogether indicates an expected call of UpdateMasterAgentPoolTogether
func (mr *MockUpgraderMockRecorder) UpdateMasterAgentPoolTogether(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMasterAgentPoolTogether", reflect.TypeOf((*MockUpgrader)(nil).UpdateMasterAgentPoolTogether), arg0, arg1)
}

// UpdateWorkerAgentPool mocks base method
func (m *MockUpgrader) UpdateWorkerAgentPool(arg0 context.Context, arg1 *api.AgentPoolProfile, arg2 string) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerAgentPool", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// UpdateWorkerAgentPool indicates an expected call of UpdateWorkerAgentPool
func (mr *MockUpgraderMockRecorder) UpdateWorkerAgentPool(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerAgentPool", reflect.TypeOf((*MockUpgrader)(nil).UpdateWorkerAgentPool), arg0, arg1, arg2)
}

// WaitForHealthzStatusOk mocks base method
func (m *MockUpgrader) WaitForHealthzStatusOk(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForHealthzStatusOk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForHealthzStatusOk indicates an expected call of WaitForHealthzStatusOk
func (mr *MockUpgraderMockRecorder) WaitForHealthzStatusOk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForHealthzStatusOk", reflect.TypeOf((*MockUpgrader)(nil).WaitForHealthzStatusOk), arg0)
}

// WaitForNodesInAgentPoolProfile mocks base method
func (m *MockUpgrader) WaitForNodesInAgentPoolProfile(arg0 context.Context, arg1 *api.AgentPoolProfile, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForNodesInAgentPoolProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForNodesInAgentPoolProfile indicates an expected call of WaitForNodesInAgentPoolProfile
func (mr *MockUpgraderMockRecorder) WaitForNodesInAgentPoolProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForNodesInAgentPoolProfile", reflect.TypeOf((*MockUpgrader)(nil).WaitForNodesInAgentPoolProfile), arg0, arg1, arg2)
}

// WaitForReadyMaster mocks base method
func (m *MockUpgrader) WaitForReadyMaster(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReadyMaster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReadyMaster indicates an expected call of WaitForReadyMaster
func (mr *MockUpgraderMockRecorder) WaitForReadyMaster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReadyMaster", reflect.TypeOf((*MockUpgrader)(nil).WaitForReadyMaster), arg0, arg1)
}

// WaitForReadySyncPod mocks base method
func (m *MockUpgrader) WaitForReadySyncPod(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReadySyncPod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReadySyncPod indicates an expected call of WaitForReadySyncPod
func (mr *MockUpgraderMockRecorder) WaitForReadySyncPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReadySyncPod", reflect.TypeOf((*MockUpgrader)(nil).WaitForReadySyncPod), arg0)
}

// WaitForReadyWorker mocks base method
func (m *MockUpgrader) WaitForReadyWorker(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReadyWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReadyWorker indicates an expected call of WaitForReadyWorker
func (mr *MockUpgraderMockRecorder) WaitForReadyWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReadyWorker", reflect.TypeOf((*MockUpgrader)(nil).WaitForReadyWorker), arg0, arg1)
}

// WriteStartupBlobs mocks base method
func (m *MockUpgrader) WriteStartupBlobs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStartupBlobs")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStartupBlobs indicates an expected call of WriteStartupBlobs
func (mr *MockUpgraderMockRecorder) WriteStartupBlobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStartupBlobs", reflect.TypeOf((*MockUpgrader)(nil).WriteStartupBlobs))
}
