// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/azureclient/azureclient.go

// Package mock_azureclient is a generated GoMock package.
package mock_azureclient

import (
	context "context"
	marketplaceordering "github.com/Azure/azure-sdk-for-go/profiles/latest/marketplaceordering/mgmt/marketplaceordering"
	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-06-01/compute"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-05-01/resources"
	storage "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2018-02-01/storage"
	storage0 "github.com/Azure/azure-sdk-for-go/storage"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
	azureclient "github.com/openshift/openshift-azure/pkg/util/azureclient"
	io "io"
	reflect "reflect"
)

// MockClientWaitForCompletion is a mock of ClientWaitForCompletion interface
type MockClientWaitForCompletion struct {
	ctrl     *gomock.Controller
	recorder *MockClientWaitForCompletionMockRecorder
}

// MockClientWaitForCompletionMockRecorder is the mock recorder for MockClientWaitForCompletion
type MockClientWaitForCompletionMockRecorder struct {
	mock *MockClientWaitForCompletion
}

// NewMockClientWaitForCompletion creates a new mock instance
func NewMockClientWaitForCompletion(ctrl *gomock.Controller) *MockClientWaitForCompletion {
	mock := &MockClientWaitForCompletion{ctrl: ctrl}
	mock.recorder = &MockClientWaitForCompletionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientWaitForCompletion) EXPECT() *MockClientWaitForCompletionMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockClientWaitForCompletion) GetClient() autorest.Client {
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockClientWaitForCompletionMockRecorder) GetClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientWaitForCompletion)(nil).GetClient))
}

// MockDeploymentClient is a mock of DeploymentClient interface
type MockDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentClientMockRecorder
}

// MockDeploymentClientMockRecorder is the mock recorder for MockDeploymentClient
type MockDeploymentClientMockRecorder struct {
	mock *MockDeploymentClient
}

// NewMockDeploymentClient creates a new mock instance
func NewMockDeploymentClient(ctrl *gomock.Controller) *MockDeploymentClient {
	mock := &MockDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentClient) EXPECT() *MockDeploymentClientMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockDeploymentClient) GetClient() autorest.Client {
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockDeploymentClientMockRecorder) GetClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockDeploymentClient)(nil).GetClient))
}

// CreateOrUpdate mocks base method
func (m *MockDeploymentClient) CreateOrUpdate(ctx context.Context, resourceGroupName, deploymentName string, parameters resources.Deployment) (resources.DeploymentsCreateOrUpdateFuture, error) {
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, deploymentName, parameters)
	ret0, _ := ret[0].(resources.DeploymentsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDeploymentClientMockRecorder) CreateOrUpdate(ctx, resourceGroupName, deploymentName, parameters interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDeploymentClient)(nil).CreateOrUpdate), ctx, resourceGroupName, deploymentName, parameters)
}

// MockAccountsClient is a mock of AccountsClient interface
type MockAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsClientMockRecorder
}

// MockAccountsClientMockRecorder is the mock recorder for MockAccountsClient
type MockAccountsClientMockRecorder struct {
	mock *MockAccountsClient
}

// NewMockAccountsClient creates a new mock instance
func NewMockAccountsClient(ctrl *gomock.Controller) *MockAccountsClient {
	mock := &MockAccountsClient{ctrl: ctrl}
	mock.recorder = &MockAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountsClient) EXPECT() *MockAccountsClientMockRecorder {
	return m.recorder
}

// ListKeys mocks base method
func (m *MockAccountsClient) ListKeys(context context.Context, resourceGroup, accountName string) (storage.AccountListKeysResult, error) {
	ret := m.ctrl.Call(m, "ListKeys", context, resourceGroup, accountName)
	ret0, _ := ret[0].(storage.AccountListKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockAccountsClientMockRecorder) ListKeys(context, resourceGroup, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockAccountsClient)(nil).ListKeys), context, resourceGroup, accountName)
}

// ListByResourceGroup mocks base method
func (m *MockAccountsClient) ListByResourceGroup(context context.Context, resourceGroup string) (storage.AccountListResult, error) {
	ret := m.ctrl.Call(m, "ListByResourceGroup", context, resourceGroup)
	ret0, _ := ret[0].(storage.AccountListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockAccountsClientMockRecorder) ListByResourceGroup(context, resourceGroup interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockAccountsClient)(nil).ListByResourceGroup), context, resourceGroup)
}

// GetStorageAccount mocks base method
func (m *MockAccountsClient) GetStorageAccount(ctx context.Context, resourceGroup, typeTag string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetStorageAccount", ctx, resourceGroup, typeTag)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAccount indicates an expected call of GetStorageAccount
func (mr *MockAccountsClientMockRecorder) GetStorageAccount(ctx, resourceGroup, typeTag interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAccount", reflect.TypeOf((*MockAccountsClient)(nil).GetStorageAccount), ctx, resourceGroup, typeTag)
}

// GetStorageAccountKey mocks base method
func (m *MockAccountsClient) GetStorageAccountKey(ctx context.Context, resourceGroup, accountName string) (string, error) {
	ret := m.ctrl.Call(m, "GetStorageAccountKey", ctx, resourceGroup, accountName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAccountKey indicates an expected call of GetStorageAccountKey
func (mr *MockAccountsClientMockRecorder) GetStorageAccountKey(ctx, resourceGroup, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAccountKey", reflect.TypeOf((*MockAccountsClient)(nil).GetStorageAccountKey), ctx, resourceGroup, accountName)
}

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// GetContainerReference mocks base method
func (m *MockStorageClient) GetContainerReference(name string) azureclient.StorageContainerReference {
	ret := m.ctrl.Call(m, "GetContainerReference", name)
	ret0, _ := ret[0].(azureclient.StorageContainerReference)
	return ret0
}

// GetContainerReference indicates an expected call of GetContainerReference
func (mr *MockStorageClientMockRecorder) GetContainerReference(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerReference", reflect.TypeOf((*MockStorageClient)(nil).GetContainerReference), name)
}

// GetBlobService mocks base method
func (m *MockStorageClient) GetBlobService() storage0.BlobStorageClient {
	ret := m.ctrl.Call(m, "GetBlobService")
	ret0, _ := ret[0].(storage0.BlobStorageClient)
	return ret0
}

// GetBlobService indicates an expected call of GetBlobService
func (mr *MockStorageClientMockRecorder) GetBlobService() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobService", reflect.TypeOf((*MockStorageClient)(nil).GetBlobService))
}

// MockStorageContainerReference is a mock of StorageContainerReference interface
type MockStorageContainerReference struct {
	ctrl     *gomock.Controller
	recorder *MockStorageContainerReferenceMockRecorder
}

// MockStorageContainerReferenceMockRecorder is the mock recorder for MockStorageContainerReference
type MockStorageContainerReferenceMockRecorder struct {
	mock *MockStorageContainerReference
}

// NewMockStorageContainerReference creates a new mock instance
func NewMockStorageContainerReference(ctrl *gomock.Controller) *MockStorageContainerReference {
	mock := &MockStorageContainerReference{ctrl: ctrl}
	mock.recorder = &MockStorageContainerReferenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageContainerReference) EXPECT() *MockStorageContainerReferenceMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method
func (m *MockStorageContainerReference) CreateIfNotExists(options *storage0.CreateContainerOptions) (bool, error) {
	ret := m.ctrl.Call(m, "CreateIfNotExists", options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists
func (mr *MockStorageContainerReferenceMockRecorder) CreateIfNotExists(options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockStorageContainerReference)(nil).CreateIfNotExists), options)
}

// GetBlobReference mocks base method
func (m *MockStorageContainerReference) GetBlobReference(name string) azureclient.StorageBlob {
	ret := m.ctrl.Call(m, "GetBlobReference", name)
	ret0, _ := ret[0].(azureclient.StorageBlob)
	return ret0
}

// GetBlobReference indicates an expected call of GetBlobReference
func (mr *MockStorageContainerReferenceMockRecorder) GetBlobReference(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobReference", reflect.TypeOf((*MockStorageContainerReference)(nil).GetBlobReference), name)
}

// MockStorageBlob is a mock of StorageBlob interface
type MockStorageBlob struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBlobMockRecorder
}

// MockStorageBlobMockRecorder is the mock recorder for MockStorageBlob
type MockStorageBlobMockRecorder struct {
	mock *MockStorageBlob
}

// NewMockStorageBlob creates a new mock instance
func NewMockStorageBlob(ctrl *gomock.Controller) *MockStorageBlob {
	mock := &MockStorageBlob{ctrl: ctrl}
	mock.recorder = &MockStorageBlobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageBlob) EXPECT() *MockStorageBlobMockRecorder {
	return m.recorder
}

// CreateBlockBlobFromReader mocks base method
func (m *MockStorageBlob) CreateBlockBlobFromReader(blob io.Reader, options *storage0.PutBlobOptions) error {
	ret := m.ctrl.Call(m, "CreateBlockBlobFromReader", blob, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlockBlobFromReader indicates an expected call of CreateBlockBlobFromReader
func (mr *MockStorageBlobMockRecorder) CreateBlockBlobFromReader(blob, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlockBlobFromReader", reflect.TypeOf((*MockStorageBlob)(nil).CreateBlockBlobFromReader), blob, options)
}

// Get mocks base method
func (m *MockStorageBlob) Get(options *storage0.GetBlobOptions) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Get", options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageBlobMockRecorder) Get(options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageBlob)(nil).Get), options)
}

// MockMarketPlaceAgreementsClient is a mock of MarketPlaceAgreementsClient interface
type MockMarketPlaceAgreementsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMarketPlaceAgreementsClientMockRecorder
}

// MockMarketPlaceAgreementsClientMockRecorder is the mock recorder for MockMarketPlaceAgreementsClient
type MockMarketPlaceAgreementsClientMockRecorder struct {
	mock *MockMarketPlaceAgreementsClient
}

// NewMockMarketPlaceAgreementsClient creates a new mock instance
func NewMockMarketPlaceAgreementsClient(ctrl *gomock.Controller) *MockMarketPlaceAgreementsClient {
	mock := &MockMarketPlaceAgreementsClient{ctrl: ctrl}
	mock.recorder = &MockMarketPlaceAgreementsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketPlaceAgreementsClient) EXPECT() *MockMarketPlaceAgreementsClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMarketPlaceAgreementsClient) Get(ctx context.Context, publisherID, offerID, planID string) (marketplaceordering.AgreementTerms, error) {
	ret := m.ctrl.Call(m, "Get", ctx, publisherID, offerID, planID)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMarketPlaceAgreementsClientMockRecorder) Get(ctx, publisherID, offerID, planID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMarketPlaceAgreementsClient)(nil).Get), ctx, publisherID, offerID, planID)
}

// Create mocks base method
func (m *MockMarketPlaceAgreementsClient) Create(ctx context.Context, publisherID, offerID, planID string, parameters marketplaceordering.AgreementTerms) (marketplaceordering.AgreementTerms, error) {
	ret := m.ctrl.Call(m, "Create", ctx, publisherID, offerID, planID, parameters)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMarketPlaceAgreementsClientMockRecorder) Create(ctx, publisherID, offerID, planID, parameters interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMarketPlaceAgreementsClient)(nil).Create), ctx, publisherID, offerID, planID, parameters)
}

// MockVirtualMachineScaleSetsClient is a mock of VirtualMachineScaleSetsClient interface
type MockVirtualMachineScaleSetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetsClientMockRecorder
}

// MockVirtualMachineScaleSetsClientMockRecorder is the mock recorder for MockVirtualMachineScaleSetsClient
type MockVirtualMachineScaleSetsClientMockRecorder struct {
	mock *MockVirtualMachineScaleSetsClient
}

// NewMockVirtualMachineScaleSetsClient creates a new mock instance
func NewMockVirtualMachineScaleSetsClient(ctrl *gomock.Controller) *MockVirtualMachineScaleSetsClient {
	mock := &MockVirtualMachineScaleSetsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineScaleSetsClient) EXPECT() *MockVirtualMachineScaleSetsClientMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockVirtualMachineScaleSetsClient) GetClient() autorest.Client {
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) GetClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).GetClient))
}

// Update mocks base method
func (m *MockVirtualMachineScaleSetsClient) Update(ctx context.Context, resourceGroupName, VMScaleSetName string, parameters compute.VirtualMachineScaleSetUpdate) (compute.VirtualMachineScaleSetsUpdateFuture, error) {
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, VMScaleSetName, parameters)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) Update(ctx, resourceGroupName, VMScaleSetName, parameters interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).Update), ctx, resourceGroupName, VMScaleSetName, parameters)
}

// UpdateInstances mocks base method
func (m *MockVirtualMachineScaleSetsClient) UpdateInstances(ctx context.Context, resourceGroupName, VMScaleSetName string, VMInstanceIDs compute.VirtualMachineScaleSetVMInstanceRequiredIDs) (compute.VirtualMachineScaleSetsUpdateInstancesFuture, error) {
	ret := m.ctrl.Call(m, "UpdateInstances", ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetsUpdateInstancesFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstances indicates an expected call of UpdateInstances
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) UpdateInstances(ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).UpdateInstances), ctx, resourceGroupName, VMScaleSetName, VMInstanceIDs)
}

// MockVirtualMachineScaleSetVMsClient is a mock of VirtualMachineScaleSetVMsClient interface
type MockVirtualMachineScaleSetVMsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetVMsClientMockRecorder
}

// MockVirtualMachineScaleSetVMsClientMockRecorder is the mock recorder for MockVirtualMachineScaleSetVMsClient
type MockVirtualMachineScaleSetVMsClientMockRecorder struct {
	mock *MockVirtualMachineScaleSetVMsClient
}

// NewMockVirtualMachineScaleSetVMsClient creates a new mock instance
func NewMockVirtualMachineScaleSetVMsClient(ctrl *gomock.Controller) *MockVirtualMachineScaleSetVMsClient {
	mock := &MockVirtualMachineScaleSetVMsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetVMsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineScaleSetVMsClient) EXPECT() *MockVirtualMachineScaleSetVMsClientMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) GetClient() autorest.Client {
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) GetClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).GetClient))
}

// List mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) List(ctx context.Context, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand string) (compute.VirtualMachineScaleSetVMListResultPage, error) {
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) List(ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).List), ctx, resourceGroupName, virtualMachineScaleSetName, filter, selectParameter, expand)
}

// Delete mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Delete(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsDeleteFuture, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Delete(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Delete), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Deallocate mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Deallocate(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsDeallocateFuture, error) {
	ret := m.ctrl.Call(m, "Deallocate", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsDeallocateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deallocate indicates an expected call of Deallocate
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Deallocate(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Deallocate), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Reimage mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Reimage(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsReimageFuture, error) {
	ret := m.ctrl.Call(m, "Reimage", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Reimage(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Reimage), ctx, resourceGroupName, VMScaleSetName, instanceID)
}

// Start mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Start(ctx context.Context, resourceGroupName, VMScaleSetName, instanceID string) (compute.VirtualMachineScaleSetVMsStartFuture, error) {
	ret := m.ctrl.Call(m, "Start", ctx, resourceGroupName, VMScaleSetName, instanceID)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetVMsStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Start(ctx, resourceGroupName, VMScaleSetName, instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Start), ctx, resourceGroupName, VMScaleSetName, instanceID)
}
